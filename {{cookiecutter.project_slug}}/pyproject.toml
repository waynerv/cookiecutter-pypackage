{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.md"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
packages = [
    { include = "{{ cookiecutter.pkg_name }}" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
{%- if cookiecutter.command_line_interface|lower == 'click' %}
click = "^8.1.7"
rich = "^13.9.1"
{%- endif %}
pydantic = "^2.9.2"

[tool.poetry.group.dev.dependencies]
{%- if cookiecutter.use_ruff == 'y' %}
ruff = "^0.7.3"
{%- else %}
black = "^23.10.1"
isort = "^5.12.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
{%- endif %}

{%- if cookiecutter.use_mypy == 'y' %}
mypy = "^1.6.1"
{%- endif %}
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
factory-boy = "^3.3.7"
pytz = "^2024.1"
bump2version = "^1.0.1"
twine = "^4.0.2"
coverage = "^7.6.1"
tox = "^4.15.1"

[tool.poetry.group.doc.dependencies]
mkdocs = "^1.5.3"
mkdocs-include-markdown-plugin = "^6.0.3"
mkdocs-material = "^9.4.6"
mkdocs-autorefs = "^0.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

{% if cookiecutter.command_line_interface|lower == 'click' -%}
[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.pkg_name }}.cli:main'
{% endif -%}


{%- if cookiecutter.use_ruff != 'y' %}
[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 6
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = false
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = docs/conf.py
{%- endif %}
[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"


{%- if cookiecutter.use_ruff == 'y' %}
[tool.ruff]
line-length = 120
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".vscode",
    "__pypackages__",
    "_build",
    "node_modules",
    "site-packages",
    "**/migrations/*.py",
]
[tool.ruff.lint]

# https://docs.astral.sh/ruff/rules/

select = [
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "D", # pydocstyle
    "E", # pycodestyle
    "ERA", # eradicate
    "F", # Pyflakes
    "FIX", # flake8-fixme
    "G", # flake8-logging-format
    "I", # isort
    "LOG", # flake8-logging
    "N", # pep-8 naming
    "PL", # Pylint
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T20", # flake8-print
    "UP", # pyupgrade
]
ignore = [
    "ANN101", # Missing type annotation for self in method
    "D100"
]
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402", "D"]
# Ignore `D` rules everywhere except for the `src/` directory.
"{{cookiecutter.project_slug}}/tests/**.py" =  ["D", "ANN", "ERA", "PLR", "ARG", "SLF"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
{%- endif %}
